{"ast":null,"code":"import { apiSlice } from './apiSlice';\nimport { USERS_URL } from '../constants';\nexport const userApiSlice = apiSlice.injectEndpoints({\n  endpoints: builder => ({\n    login: builder.mutation({\n      query: _ref => {\n        let {\n          email,\n          password,\n          googleToken\n        } = _ref;\n        let body;\n        if (googleToken) {\n          body = {\n            googleToken\n          };\n        } else {\n          body = {\n            email,\n            password\n          };\n        }\n        return {\n          url: `${USERS_URL}/auth`,\n          method: 'POST',\n          body\n        };\n      }\n    }),\n    register: builder.mutation({\n      query: data => ({\n        url: `${USERS_URL}`,\n        method: 'POST',\n        body: data\n      })\n    }),\n    logout: builder.mutation({\n      query: () => ({\n        url: `${USERS_URL}/logout`,\n        method: 'POST'\n      })\n    }),\n    profile: builder.mutation({\n      query: data => ({\n        url: `${USERS_URL}/profile`,\n        method: 'PUT',\n        body: data\n      })\n    }),\n    getUsers: builder.query({\n      query: () => ({\n        url: USERS_URL\n      }),\n      providesTags: ['User'],\n      keepUnusedDataFor: 5\n    }),\n    deleteUser: builder.mutation({\n      query: userId => ({\n        url: `${USERS_URL}/${userId}`,\n        method: 'DELETE'\n      })\n    }),\n    getUserDetails: builder.query({\n      query: id => ({\n        url: `${USERS_URL}/${id}`\n      }),\n      keepUnusedDataFor: 5\n    }),\n    updateUser: builder.mutation({\n      query: data => ({\n        url: `${USERS_URL}/${data.userId}`,\n        method: 'PUT',\n        body: data\n      }),\n      invalidatesTags: ['User']\n    }),\n    googleLogin: builder.mutation({\n      query: () => ({\n        url: `${USERS_URL}/auth/google`,\n        method: 'GET'\n      })\n    })\n  })\n});\nexport const {\n  useLoginMutation,\n  useLogoutMutation,\n  useRegisterMutation,\n  useProfileMutation,\n  useGetUsersQuery,\n  useDeleteUserMutation,\n  useUpdateUserMutation,\n  useGetUserDetailsQuery,\n  useGoogleLoginMutation // Add this line to export the useGoogleLoginMutation hook\n} = userApiSlice;","map":{"version":3,"names":["apiSlice","USERS_URL","userApiSlice","injectEndpoints","endpoints","builder","login","mutation","query","_ref","email","password","googleToken","body","url","method","register","data","logout","profile","getUsers","providesTags","keepUnusedDataFor","deleteUser","userId","getUserDetails","id","updateUser","invalidatesTags","googleLogin","useLoginMutation","useLogoutMutation","useRegisterMutation","useProfileMutation","useGetUsersQuery","useDeleteUserMutation","useUpdateUserMutation","useGetUserDetailsQuery","useGoogleLoginMutation"],"sources":["C:/Users/adam-/OneDrive/Dokument/flyttanu.se/flyttanu.se/frontend/src/slices/usersApiSlice.js"],"sourcesContent":["import { apiSlice } from './apiSlice';\r\nimport { USERS_URL } from '../constants';\r\n\r\nexport const userApiSlice = apiSlice.injectEndpoints({\r\n  endpoints: (builder) => ({\r\n    \r\n    login: builder.mutation({\r\n      query: ({ email, password, googleToken }) => {\r\n        let body;\r\n        if (googleToken) {\r\n          body = { googleToken };\r\n        } else {\r\n          body = { email, password };\r\n        }\r\n\r\n        return {\r\n          url: `${USERS_URL}/auth`,\r\n          method: 'POST',\r\n          body,\r\n        };\r\n      },\r\n    }),\r\n    register: builder.mutation({\r\n      query: (data) => ({\r\n        url: `${USERS_URL}`,\r\n        method: 'POST',\r\n        body: data,\r\n      }),\r\n    }),\r\n    logout: builder.mutation({\r\n      query: () => ({\r\n        url: `${USERS_URL}/logout`,\r\n        method: 'POST',\r\n      }),\r\n    }),\r\n    profile: builder.mutation({\r\n      query: (data) => ({\r\n        url: `${USERS_URL}/profile`,\r\n        method: 'PUT',\r\n        body: data,\r\n      }),\r\n    }),\r\n    getUsers: builder.query({\r\n      query: () => ({\r\n        url: USERS_URL,\r\n      }),\r\n      providesTags: ['User'],\r\n      keepUnusedDataFor: 5,\r\n    }),\r\n    deleteUser: builder.mutation({\r\n      query: (userId) => ({\r\n        url: `${USERS_URL}/${userId}`,\r\n        method: 'DELETE',\r\n      }),\r\n    }),\r\n    getUserDetails: builder.query({\r\n      query: (id) => ({\r\n        url: `${USERS_URL}/${id}`,\r\n      }),\r\n      keepUnusedDataFor: 5,\r\n    }),\r\n    updateUser: builder.mutation({\r\n      query: (data) => ({\r\n        url: `${USERS_URL}/${data.userId}`,\r\n        method: 'PUT',\r\n        body: data,\r\n      }),\r\n      invalidatesTags: ['User'],\r\n    }),\r\n    googleLogin: builder.mutation({\r\n      query: () => ({\r\n        url: `${USERS_URL}/auth/google`,\r\n        method: 'GET',\r\n      }),\r\n    }),\r\n  }),\r\n});\r\n\r\nexport const {\r\n  useLoginMutation,\r\n  useLogoutMutation,\r\n  useRegisterMutation,\r\n  useProfileMutation,\r\n  useGetUsersQuery,\r\n  useDeleteUserMutation,\r\n  useUpdateUserMutation,\r\n  useGetUserDetailsQuery,\r\n  useGoogleLoginMutation, // Add this line to export the useGoogleLoginMutation hook\r\n} = userApiSlice;"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,YAAY;AACrC,SAASC,SAAS,QAAQ,cAAc;AAExC,OAAO,MAAMC,YAAY,GAAGF,QAAQ,CAACG,eAAe,CAAC;EACnDC,SAAS,EAAGC,OAAO,KAAM;IAEvBC,KAAK,EAAED,OAAO,CAACE,QAAQ,CAAC;MACtBC,KAAK,EAAEC,IAAA,IAAsC;QAAA,IAArC;UAAEC,KAAK;UAAEC,QAAQ;UAAEC;QAAY,CAAC,GAAAH,IAAA;QACtC,IAAII,IAAI;QACR,IAAID,WAAW,EAAE;UACfC,IAAI,GAAG;YAAED;UAAY,CAAC;QACxB,CAAC,MAAM;UACLC,IAAI,GAAG;YAAEH,KAAK;YAAEC;UAAS,CAAC;QAC5B;QAEA,OAAO;UACLG,GAAG,EAAG,GAAEb,SAAU,OAAM;UACxBc,MAAM,EAAE,MAAM;UACdF;QACF,CAAC;MACH;IACF,CAAC,CAAC;IACFG,QAAQ,EAAEX,OAAO,CAACE,QAAQ,CAAC;MACzBC,KAAK,EAAGS,IAAI,KAAM;QAChBH,GAAG,EAAG,GAAEb,SAAU,EAAC;QACnBc,MAAM,EAAE,MAAM;QACdF,IAAI,EAAEI;MACR,CAAC;IACH,CAAC,CAAC;IACFC,MAAM,EAAEb,OAAO,CAACE,QAAQ,CAAC;MACvBC,KAAK,EAAEA,CAAA,MAAO;QACZM,GAAG,EAAG,GAAEb,SAAU,SAAQ;QAC1Bc,MAAM,EAAE;MACV,CAAC;IACH,CAAC,CAAC;IACFI,OAAO,EAAEd,OAAO,CAACE,QAAQ,CAAC;MACxBC,KAAK,EAAGS,IAAI,KAAM;QAChBH,GAAG,EAAG,GAAEb,SAAU,UAAS;QAC3Bc,MAAM,EAAE,KAAK;QACbF,IAAI,EAAEI;MACR,CAAC;IACH,CAAC,CAAC;IACFG,QAAQ,EAAEf,OAAO,CAACG,KAAK,CAAC;MACtBA,KAAK,EAAEA,CAAA,MAAO;QACZM,GAAG,EAAEb;MACP,CAAC,CAAC;MACFoB,YAAY,EAAE,CAAC,MAAM,CAAC;MACtBC,iBAAiB,EAAE;IACrB,CAAC,CAAC;IACFC,UAAU,EAAElB,OAAO,CAACE,QAAQ,CAAC;MAC3BC,KAAK,EAAGgB,MAAM,KAAM;QAClBV,GAAG,EAAG,GAAEb,SAAU,IAAGuB,MAAO,EAAC;QAC7BT,MAAM,EAAE;MACV,CAAC;IACH,CAAC,CAAC;IACFU,cAAc,EAAEpB,OAAO,CAACG,KAAK,CAAC;MAC5BA,KAAK,EAAGkB,EAAE,KAAM;QACdZ,GAAG,EAAG,GAAEb,SAAU,IAAGyB,EAAG;MAC1B,CAAC,CAAC;MACFJ,iBAAiB,EAAE;IACrB,CAAC,CAAC;IACFK,UAAU,EAAEtB,OAAO,CAACE,QAAQ,CAAC;MAC3BC,KAAK,EAAGS,IAAI,KAAM;QAChBH,GAAG,EAAG,GAAEb,SAAU,IAAGgB,IAAI,CAACO,MAAO,EAAC;QAClCT,MAAM,EAAE,KAAK;QACbF,IAAI,EAAEI;MACR,CAAC,CAAC;MACFW,eAAe,EAAE,CAAC,MAAM;IAC1B,CAAC,CAAC;IACFC,WAAW,EAAExB,OAAO,CAACE,QAAQ,CAAC;MAC5BC,KAAK,EAAEA,CAAA,MAAO;QACZM,GAAG,EAAG,GAAEb,SAAU,cAAa;QAC/Bc,MAAM,EAAE;MACV,CAAC;IACH,CAAC;EACH,CAAC;AACH,CAAC,CAAC;AAEF,OAAO,MAAM;EACXe,gBAAgB;EAChBC,iBAAiB;EACjBC,mBAAmB;EACnBC,kBAAkB;EAClBC,gBAAgB;EAChBC,qBAAqB;EACrBC,qBAAqB;EACrBC,sBAAsB;EACtBC,sBAAsB,CAAE;AAC1B,CAAC,GAAGpC,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}